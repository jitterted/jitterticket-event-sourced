package dev.ted.jitterticket;

import dev.ted.jitterticket.eventsourced.adapter.out.store.CsvReaderAppender;
import dev.ted.jitterticket.eventsourced.adapter.out.store.CsvStringsEventStore;
import dev.ted.jitterticket.eventsourced.application.ConcertSummaryProjector;
import dev.ted.jitterticket.eventsourced.application.PurchaseTicketsUseCase;
import dev.ted.jitterticket.eventsourced.application.port.EventStore;
import dev.ted.jitterticket.eventsourced.domain.TicketOrderId;
import dev.ted.jitterticket.eventsourced.domain.concert.Concert;
import dev.ted.jitterticket.eventsourced.domain.concert.ConcertEvent;
import dev.ted.jitterticket.eventsourced.domain.concert.ConcertId;
import dev.ted.jitterticket.eventsourced.domain.customer.Customer;
import dev.ted.jitterticket.eventsourced.domain.customer.CustomerEvent;
import dev.ted.jitterticket.eventsourced.domain.customer.CustomerId;
import dev.ted.jitterticket.eventsourced.domain.customer.TicketsPurchased;
import dev.ted.jitterticket.eventviewer.adapter.in.web.ConcertProjectionChoice;
import dev.ted.jitterticket.eventviewer.adapter.in.web.CustomerProjectionChoice;
import dev.ted.jitterticket.eventviewer.adapter.in.web.ProjectionChoices;
import org.apache.logging.log4j.util.Strings;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Stream;

@Configuration
public class TixConfiguration {

    private static final ConcertId SONIC_WAVES_CONCERT_ID = new ConcertId(UUID.fromString("123e4567-e89b-42d3-a456-556642440001"));

    @Bean
    PurchaseTicketsUseCase purchaseTicketsUseCase(EventStore<CustomerId, CustomerEvent, Customer> customerStore,
                                                  EventStore<ConcertId, ConcertEvent, Concert> concertStore) {
        return new PurchaseTicketsUseCase(concertStore, customerStore);
    }


    @Bean
    public EventStore<CustomerId, CustomerEvent, Customer> customerStore(@Value("${events.directory}") String eventsDirectory) throws IOException {
//        var customerStore = InMemoryEventStore.forCustomers();
        String eventsFilePath = eventsDirectory + File.separator + "customer-events.csv";
        var customerStore = CsvStringsEventStore.forCustomers(
                new CsvReaderAppender(Path.of(eventsFilePath)));
        // don't add sample data if the store already has data
        if (!customerStore.allEvents().toList().isEmpty()) {
            return customerStore;
        }

        CustomerId firstCustomerId = new CustomerId(UUID.fromString("68f5b2c2-d70d-4992-ad78-c94809ae9a6a"));
        customerStore.save(Customer.register(
                firstCustomerId,
                "First Customer", "first@example.com"));
        customerStore.save(Customer.register(
                new CustomerId(UUID.fromString("123e4567-e89b-42d3-a456-556642440000")),
                "Another Customer", "another@example.com"
        ));
        customerStore.save(firstCustomerId,
                           Stream.of(new TicketsPurchased(firstCustomerId, 1, TicketOrderId.createRandom(), SONIC_WAVES_CONCERT_ID, 3, 150)));
        return customerStore;
    }

    @Bean
    public EventStore<ConcertId, ConcertEvent, Concert> concertStore(@Value("${events.directory}") String eventsDirectory) throws IOException {
        if (Strings.isBlank(eventsDirectory)) {
            throw new IllegalArgumentException("eventsDirectory (from events.directory) is empty");
        }
//        var concertStore = InMemoryEventStore.forConcerts();
        String eventsFilePath = eventsDirectory + File.separator + "concert-events.csv";
        var concertStore = CsvStringsEventStore.forConcerts(
                new CsvReaderAppender(Path.of(eventsFilePath)));
        // don't add sample data if the file already exists
        if (!concertStore.allEvents().toList().isEmpty()) {
            return concertStore;
        }

        addSonicWavesConcertTo(concertStore);

        // rest of data generated by my good friend Junie
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Midnight Rebels",
                55,
                LocalDateTime.of(2025, 10, 15, 21, 0),
                LocalTime.of(20, 0),
                150,
                4));

// Example 2: Jazz ensemble with limited capacity
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Blue Note Quartet",
                35,
                LocalDateTime.of(2025, 12, 22, 19, 30),
                LocalTime.of(18, 30),
                75,
                2));

// Example 3: Popular pop artist with higher capacity
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Stella Nova",
                65,
                LocalDateTime.of(2025, 10, 5, 20, 0),
                LocalTime.of(18, 30),
                250,
                6));

// Example 4: Indie folk band with afternoon show
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Woodland Echoes",
                30,
                LocalDateTime.of(2025, 12, 12, 16, 0),
                LocalTime.of(15, 0),
                120,
                4));

// Example 5: Electronic music DJ with a late night show
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Pulse Wave",
                40,
                LocalDateTime.of(2025, 11, 8, 22, 30),
                LocalTime.of(21, 0),
                180,
                5));

// Example 6: Classical orchestra
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Metropolitan Symphony",
                70,
                LocalDateTime.of(2025, 12, 20, 19, 0),
                LocalTime.of(18, 0),
                200,
                3));

// Example 7: Alternative rock band
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Cosmic Drift",
                45,
                LocalDateTime.of(2026, 1, 17, 20, 0),
                LocalTime.of(19, 0),
                130,
                4));

// Example 8: Hip-hop artist
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Lyrical Storm",
                50,
                LocalDateTime.of(2025, 10, 31, 21, 0),
                LocalTime.of(19, 30),
                175,
                4));

        // h/t sadukie
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Jagged Arrays",
                50,
                LocalDateTime.of(2025, 11, 3, 20, 0),
                LocalTime.of(19, 0),
                150,
                6));
        return concertStore;
    }

    private static void addSonicWavesConcertTo(EventStore<ConcertId, ConcertEvent, Concert> concertStore) {
        Concert sonicWavesConcert = Concert.schedule(
                SONIC_WAVES_CONCERT_ID,
                "The Sonic Waves",
                45,
                LocalDateTime.of(2025, 10, 26, 20, 0),
                LocalTime.of(19, 0),
                100,
                8);

        sonicWavesConcert.rescheduleTo(
                LocalDateTime.of(2025, 11, 2, 21, 0),
                LocalTime.of(20, 0));

        sonicWavesConcert.sellTicketsTo(CustomerId.createRandom(), 8);
        sonicWavesConcert.sellTicketsTo(CustomerId.createRandom(), 4);
        sonicWavesConcert.sellTicketsTo(CustomerId.createRandom(), 2);
        sonicWavesConcert.sellTicketsTo(CustomerId.createRandom(), 1);
        sonicWavesConcert.sellTicketsTo(CustomerId.createRandom(), 2);
        sonicWavesConcert.sellTicketsTo(CustomerId.createRandom(), 3);

        concertStore.save(sonicWavesConcert);
    }

    @Bean
    public ConcertSummaryProjector concertProjector(EventStore<ConcertId, ConcertEvent, Concert> concertStore) {
        return new ConcertSummaryProjector(concertStore);
    }

    @Bean
    public ProjectionChoices projectionChoices(
            EventStore<ConcertId, ConcertEvent, Concert> concertStore,
            EventStore<CustomerId, CustomerEvent, Customer> customerStore
            ) {
        return new ProjectionChoices(Map.of(
                "concerts", new ConcertProjectionChoice(concertStore),
                "customers", new CustomerProjectionChoice(customerStore)
        ));
    }

}
