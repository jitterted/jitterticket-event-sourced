package dev.ted.jitterticket;

import dev.ted.jitterticket.eventsourced.application.RegisteredCustomersProjector;
import dev.ted.jitterticket.eventsourced.application.port.EventStore;
import dev.ted.jitterticket.eventsourced.domain.TicketOrderId;
import dev.ted.jitterticket.eventsourced.domain.concert.Concert;
import dev.ted.jitterticket.eventsourced.domain.concert.ConcertEvent;
import dev.ted.jitterticket.eventsourced.domain.concert.ConcertId;
import dev.ted.jitterticket.eventsourced.domain.customer.Customer;
import dev.ted.jitterticket.eventsourced.domain.customer.CustomerEvent;
import dev.ted.jitterticket.eventsourced.domain.customer.CustomerId;
import dev.ted.jitterticket.eventsourced.domain.customer.TicketsPurchased;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;
import java.util.UUID;
import java.util.stream.Stream;

@Component
public class SampleDataPopulator implements ApplicationRunner {

    static final ConcertId SONIC_WAVES_CONCERT_ID = new ConcertId(UUID.fromString("123e4567-e89b-42d3-a456-556642440001"));
    private final EventStore<CustomerId, CustomerEvent, Customer> customerStore;
    private final RegisteredCustomersProjector registeredCustomersProjector;
    private final EventStore<ConcertId, ConcertEvent, Concert> concertStore;

    public SampleDataPopulator(EventStore<CustomerId, CustomerEvent, Customer> customerStore,
                               EventStore<ConcertId, ConcertEvent, Concert> concertStore,
                               RegisteredCustomersProjector registeredCustomersProjector) {
        this.customerStore = customerStore;
        this.concertStore = concertStore;
        this.registeredCustomersProjector = registeredCustomersProjector;
    }

    @Override
    public void run(ApplicationArguments args) {
        populateCustomerSampleData();
        populateConcertSampleData();
    }

    private static LocalDateTime daysFromNowAt(long days, int hour, int minute) {
        return LocalDateTime.now()
                .truncatedTo(ChronoUnit.DAYS)
                .plusDays(days)
                .withHour(hour)
                .withMinute(minute);
    }

    void populateConcertSampleData() {
        // don't add sample data if sample concerts were already added
        if (!concertStore.allEvents().toList().isEmpty()) {
            return;
        }

        addSonicWavesConcertToStore();

        // rest of data generated by my good friend Junie
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Midnight Rebels",
                55,
                daysFromNowAt(15, 21, 0),
                LocalTime.of(20, 0),
                150,
                4));

// Example 2: Jazz ensemble with limited capacity
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Blue Note Quartet",
                35,
                daysFromNowAt(83, 19, 30),
                LocalTime.of(18, 30),
                75,
                2));

// Example 3: Popular pop artist with higher capacity
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Stella Nova",
                65,
                daysFromNowAt(5, 20, 0),
                LocalTime.of(18, 30),
                250,
                6));

// Example 4: Indie folk band with afternoon show
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Woodland Echoes",
                30,
                daysFromNowAt(73, 16, 0),
                LocalTime.of(15, 0),
                120,
                4));

// Example 5: Electronic music DJ with a late night show
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Pulse Wave",
                40,
                daysFromNowAt(39, 22, 30),
                LocalTime.of(21, 0),
                180,
                5));

// Example 6: Classical orchestra
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Metropolitan Symphony",
                70,
                daysFromNowAt(81, 19, 0),
                LocalTime.of(18, 0),
                200,
                3));

// Example 7: Alternative rock band
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Cosmic Drift",
                45,
                daysFromNowAt(109, 20, 0),
                LocalTime.of(19, 0),
                130,
                4));

// Example 8: Hip-hop artist
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Lyrical Storm",
                50,
                daysFromNowAt(31, 21, 0),
                LocalTime.of(19, 30),
                175,
                4));

        // h/t sadukie
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Jagged Arrays",
                50,
                daysFromNowAt(34, 20, 0),
                LocalTime.of(19, 0),
                150,
                6));
    }

    private void addSonicWavesConcertToStore() {
        Concert sonicWavesConcert = Concert.schedule(
                SONIC_WAVES_CONCERT_ID,
                "The Sonic Waves",
                45,
                daysFromNowAt(26, 20, 0),
                LocalTime.of(19, 0),
                100,
                8);

        sonicWavesConcert.rescheduleTo(
                daysFromNowAt(33, 21, 0),
                LocalTime.of(20, 0));

        sonicWavesConcert.sellTicketsTo(CustomerId.createRandom(), 8);
        sonicWavesConcert.sellTicketsTo(CustomerId.createRandom(), 4);
        sonicWavesConcert.sellTicketsTo(CustomerId.createRandom(), 2);
        sonicWavesConcert.sellTicketsTo(CustomerId.createRandom(), 1);
        sonicWavesConcert.sellTicketsTo(CustomerId.createRandom(), 2);
        sonicWavesConcert.sellTicketsTo(CustomerId.createRandom(), 3);

        concertStore.save(sonicWavesConcert);
    }

    private void populateCustomerSampleData() {
        // don't add sample data if the store already has CUSTOMER data
        if (registeredCustomersProjector.allCustomers().findAny().isPresent()) {
            return;
        }

        CustomerId firstCustomerId = new CustomerId(UUID.fromString("68f5b2c2-d70d-4992-ad78-c94809ae9a6a"));
        customerStore.save(Customer.register(
                firstCustomerId,
                "First Customer", "first@example.com"));
        customerStore.save(Customer.register(
                new CustomerId(UUID.fromString("123e4567-e89b-42d3-a456-556642440000")),
                "Another Customer", "another@example.com"
        ));
        customerStore.save(firstCustomerId,
                           Stream.of(new TicketsPurchased(firstCustomerId, 1, TicketOrderId.createRandom(), SONIC_WAVES_CONCERT_ID, 3, 150)));
    }
}
